1
00:00:01,795 --> 00:00:06,795
We're making a space game and space is, well, black.
我们在制作太空游戏,太空就是黑色的

2
00:00:06,795 --> 00:00:09,198
But flat black is boring.
但是这种完全的黑色太无聊了

3
00:00:09,698 --> 00:00:12,651
So let's add a background to our game.
所以,让我们给游戏加上个背景

4
00:00:12,651 --> 00:00:14,845
First, let's begin by deactivating our player
首先,我们先取消我们玩家对象的显示

5
00:00:14,845 --> 00:00:18,736
game object, it will simply be in the way for now.
这个对我们来说太简单了(钩掉圈中的钩即可)

6
00:00:19,719 --> 00:00:21,719
Next create a quad to hold our
下一步创建一个四边形来存放背景图像

7
00:00:21,719 --> 00:00:26,652
background image by selecting Create - Quad
在层级视窗中点击

8
00:00:26,652 --> 00:00:28,652
from the Hierarchy's Create menu.
Create - Quad

9
00:00:29,553 --> 00:00:31,553
Rename this Background.
然后重命名为Background

10
00:00:32,661 --> 00:00:34,258
Where is it?
这个新对象在哪?

11
00:00:34,258 --> 00:00:38,225
We've created a quad, but we can't see it in our game.
我们创建了一个四边形,但是我们在游戏中看不到它

12
00:00:38,225 --> 00:00:41,302
Let's switch to the Scene view to see what's going on.
我们先切换回场景视图看看发生了什么.

13
00:00:41,302 --> 00:00:43,885
There it is, it's oriented in a way
在这,它旋转的角度

14
00:00:43,885 --> 00:00:46,304
that's not facing the main camera.
使得它的表面并没面对相机

15
00:00:46,304 --> 00:00:48,304
The main camera can't see it.
正好使得主相机看不到它

16
00:00:48,804 --> 00:00:51,108
To adjust this let's first reset
我们来改变这个状况,

17
00:00:51,108 --> 00:00:53,108
the game object's transform to make sure
首先我们要重置下这个对象的变形参数

18
00:00:53,108 --> 00:00:55,108
it is at origin
保证它在原点

19
00:00:55,108 --> 00:00:57,108
and then let's change the background's
然后让背景

20
00:00:57,108 --> 00:01:00,277
transform rotation along the X axis.
沿着X轴旋转

21
00:01:00,860 --> 00:01:03,480
Let's set this value to 90 degrees.
我们设定旋转90度

22
00:01:03,980 --> 00:01:05,897
Now the background quad is facing
现在背景这个四边形已经面向

23
00:01:05,897 --> 00:01:07,799
towards our main camera.
主相机了

24
00:01:07,799 --> 00:01:10,361
and we can see it now in the game view.
现在我们在游戏视图中也能看到它

25
00:01:11,473 --> 00:01:13,857
I'm going to switch back to the Scene view.
我们再切换回场景视图

26
00:01:14,484 --> 00:01:16,456
The stock quad comes with a 
这个存储背景的四边形

27
00:01:16,456 --> 00:01:18,154
component we don't need.
自带了一些我们不需要的组建

28
00:01:18,154 --> 00:01:20,154
We can safely remove the mesh collider
我们可以直接把他们去掉

29
00:01:20,154 --> 00:01:22,744
component as we won't be using it.
网格碰撞检测可以去掉,因为我们不会用到它

30
00:01:24,049 --> 00:01:27,134
Next, let's add a texture to this background.
下一步,我们要给背景加上材质图片

31
00:01:28,283 --> 00:01:32,061
In Assets there is a directory called Textures.
在Assets文件夹中有一个目录叫Textures

32
00:01:32,061 --> 00:01:34,660
Inside Textures we will find an image
Textures中有个图像文件名为

33
00:01:34,660 --> 00:01:36,660
tile_nebula_green.
tile_nebula_green.

34
00:01:37,160 --> 00:01:39,022
Let's select this image.
我们就用这个图像

35
00:01:39,022 --> 00:01:41,188
When we select an image and inspect it 
当我们选定并查看一个图像的时候

36
00:01:41,188 --> 00:01:43,855
we are looking at that image's importer
我们看得是这个图像的导入信息

37
00:01:44,700 --> 00:01:47,405
We will leave the importer settings as they are.
我们先不改变导入信息的设置

38
00:01:47,905 --> 00:01:49,836
But if the preview window is open
如果预览窗口是打开的

39
00:01:49,836 --> 00:01:52,840
we can some additional information about this image.
我们可以看到该图片的一些额外附加的信息

40
00:01:53,340 --> 00:01:55,340
If the preview window is collapsed
如果没看到预览窗口

41
00:01:55,340 --> 00:01:58,281
we can drag the bar titled Preview upwards
我们可以把预览的标题栏向上拖动

42
00:01:58,281 --> 00:02:00,281
until we see the image clearly.
直到我们可以清楚的看到图像

43
00:02:01,306 --> 00:02:03,848
The information at the bottom of the Preview window
预览窗口底部的信息

44
00:02:03,848 --> 00:02:05,751
tells us the current resolution of the
告诉我们,当前图像的分辨率

45
00:02:05,751 --> 00:02:08,302
image in our project, the current compression method,
所使用压缩格式

46
00:02:08,302 --> 00:02:11,805
if any, and the total size of the imported image.
以及图像的大小

47
00:02:12,305 --> 00:02:14,305
What is important for us to note here is that
这里有一点我们需要注意

48
00:02:14,305 --> 00:02:16,305
this is a very large image.
当前的图像非常大

49
00:02:16,805 --> 00:02:18,805
1024 by 2048.
是1024*2048的

50
00:02:19,526 --> 00:02:21,526
So this image is more than large enough to stretch
所以这个图像比我们

51
00:02:21,526 --> 00:02:24,167
behind our 600 by 900 game view.
600*900的游戏视野大,足够作为背景了

52
00:02:24,750 --> 00:02:27,379
This is also telling us that the image is not square
同时这个信息也告诉我们

53
00:02:27,379 --> 00:02:29,379
but rectangular.
这个图像不是正方形的,是长方形的

54
00:02:30,280 --> 00:02:32,183
There are a number of ways that we can get
有很多种方法都可以将材质贴图

55
00:02:32,183 --> 00:02:34,183
a texture on to a mesh.
贴到网格上

56
00:02:34,183 --> 00:02:36,183
Let's try one of the most simply ways.
我们使用一种最简单的方法

57
00:02:36,683 --> 00:02:39,262
Grab the image, drag it,
抓住图像,拖动它

58
00:02:39,762 --> 00:02:42,390
and drop it on the background quad in the scene.
把它扔到场景视图的背景四边形上

59
00:02:42,765 --> 00:02:43,903
Done!
完成!

60
00:02:44,458 --> 00:02:46,775
Let's get a better view of our background.
让我们仔细瞧一瞧我们的背景

61
00:02:46,775 --> 00:02:48,775
Use Frame Selected to focus the
我们使用框架选定来

62
00:02:48,775 --> 00:02:50,555
Scene view camera
把视图相机拉近到背景对象上

63
00:02:51,055 --> 00:02:53,551
The image has been applied to the background quad.
图像的确被贴到了背景四边形上

64
00:02:53,551 --> 00:02:56,424
It's dark and squashed but it's there.
虽然它很暗而且压缩成了小块

65
00:02:57,946 --> 00:02:59,946
What just happened?
让我回顾下刚才发生了什么

66
00:03:01,206 --> 00:03:03,206
We can see that the texture has been attached
我们把材质贴到了一个材料上

67
00:03:03,206 --> 00:03:05,719
to a material and the material has been
把材料与一个

68
00:03:05,719 --> 00:03:08,301
associated with the quad by a reference
四边形做了关联

69
00:03:08,301 --> 00:03:10,301
in the mesh renderer.
网格渲染中使用了这个被关联的四边形

70
00:03:12,196 --> 00:03:14,528
Our mesh filter holds the mesh data,
我们的网格过滤器保存了网格数据

71
00:03:14,528 --> 00:03:16,528
in this case the quad.
这里是存在了quad中

72
00:03:18,492 --> 00:03:20,492
The mesh renderer renders that mesh using
网格渲染器使用其材料队列中的数据

73
00:03:20,492 --> 00:03:24,404
the materials in the mesh renderer's Materials Array.
对网格进行渲染

74
00:03:25,829 --> 00:03:28,668
The renderer is only able to use a texture
渲染器只能使用材料的材质

75
00:03:28,668 --> 00:03:30,501
if it's part of a material.
进行渲染

76
00:03:31,140 --> 00:03:33,140
We did not create a material, we simply
我们并没有创建新的材料

77
00:03:33,140 --> 00:03:35,140
dragged the texture on to the quad.
我们只是把材质贴图拖拽到了那个四边形上

78
00:03:36,123 --> 00:03:39,513
It was Unity that created the material for us.
Unity会自动创建一个材料供我们使用

79
00:03:39,513 --> 00:03:41,831
When we drag a texture on to a mesh,
当我们把一个材质拖到一个网格上时

80
00:03:41,831 --> 00:03:44,426
if Unity cannot find an associated material
如果Unity找不到对应这个材质的材料

81
00:03:44,426 --> 00:03:46,426
with that texture Unity will create
Unity会

82
00:03:46,426 --> 00:03:48,426
a new material for us.
新建一个材料

83
00:03:49,188 --> 00:03:51,643
Then Unity will automatically add that material
然后Unity将自动把这个材料添加到

84
00:03:51,643 --> 00:03:54,125
to that mesh renderer's Materials Array.
网格渲染器的材料队列中

85
00:03:54,668 --> 00:03:57,520
This automatic material will always
这个自动添加出来的材料

86
00:03:57,520 --> 00:03:59,520
with the default diffuse shader.
使用默认的散射着色器

87
00:04:02,230 --> 00:04:03,969
Let's look at our background. 
现在让我们再回来看背景

88
00:04:03,969 --> 00:04:06,666
Is it ready to go? No.
这就算是配置好背景了么?显然不是

89
00:04:06,666 --> 00:04:09,442
It's small, square, squashed,
它现在只不过是一个压缩了的小方块

90
00:04:09,442 --> 00:04:11,966
a bit dark and a little hard to see.
颜色很暗很难看清楚

91
00:04:12,646 --> 00:04:14,646
The first thing we need to do is scale up
首先我们得把它弄大一点

92
00:04:14,646 --> 00:04:16,646
our quad to fit our background.
最好让那个四边形充满整个背景

93
00:04:17,768 --> 00:04:19,205
We can do this by changing the
我们可以通过改变变形组建的

94
00:04:19,205 --> 00:04:21,205
transform's Scale properties.
Scale(尺寸)属性来达到这个效果

95
00:04:21,705 --> 00:04:24,894
The quad is a very simple 2 dimensional plane.
quad(四边形)是一个简单的2维平面

96
00:04:24,894 --> 00:04:27,807
We can scale the quad along the X and Y axis,
我们可以改变四边形X方向和Y方向的尺寸

97
00:04:27,807 --> 00:04:29,987
but not along the Z axis.
但是Z方向无效

98
00:04:29,987 --> 00:04:32,869
Trying to scale the Z axis does nothing.
调整Z方向的尺寸是没有效果的

99
00:04:33,963 --> 00:04:36,885
Let's reset the scale now that we've played with it.
先让我们重置下这个四边形的尺寸

100
00:04:37,924 --> 00:04:39,924
What scale should we use?
我们应该用什么样的尺寸呢?

101
00:04:40,424 --> 00:04:42,424
Let's first look at the texture itself.
先让我们看眼材质自己的属性

102
00:04:42,924 --> 00:04:45,919
It's 1024 by 2048.
它是1024*2048的

103
00:04:45,919 --> 00:04:49,193
To keep the image undistorted when we scale it up
为了让图像不失真

104
00:04:49,193 --> 00:04:52,798
we should keep an aspect ratio of 1:2.
我们的长宽比应该也设定为1:2

105
00:04:53,146 --> 00:04:55,739
This means our X scale should always be
这意味着X方向的尺寸始终应该是

106
00:04:55,739 --> 00:04:57,739
half of our Y scale.
Y方向尺寸的一半

107
00:04:57,739 --> 00:04:59,739
Or conversely our Y scale must always
或者说Y尺寸应该是

108
00:04:59,739 --> 00:05:01,433
be twice our X.
X尺寸的2倍

109
00:05:02,043 --> 00:05:04,140
To see this properly in the game let's
为了更清楚地查看在游戏中的效果我们先

110
00:05:04,140 --> 00:05:06,140
switch back to the Game view.
切换回游戏视图

111
00:05:06,902 --> 00:05:09,234
In the Game view select the background quad
在游戏视图中，选定背景四边形

112
00:05:09,234 --> 00:05:11,498
and scale it along the X axis
拉大X轴方向的尺寸

113
00:05:11,498 --> 00:05:13,288
until it fills the screen.
直到覆盖整个屏幕

114
00:05:13,860 --> 00:05:15,860
It's more than filling the screen when we use
如果我们将尺寸值调到12

115
00:05:15,860 --> 00:05:18,321
a scale value of 12 or more.
这个背景图就已经比我们的游戏显示屏幕尺寸大了

116
00:05:19,175 --> 00:05:21,175
We have enough resolution that we can afford
我们的图像分辨率很高

117
00:05:21,175 --> 00:05:23,939
to lose some of the image off the sides.
我们可以让图像的一些边缘显示在游戏视野之外

118
00:05:23,939 --> 00:05:26,063
So let's pick a good round number,
让我们选个合适的值

119
00:05:26,063 --> 00:05:28,762
like 15. It's more than big enough.
15看起来差不多,而且也够填充整个场景了

120
00:05:29,262 --> 00:05:32,502
So that we can maintain our 1:2 aspect ratio
然后我们按照长宽比1:2

121
00:05:32,502 --> 00:05:34,955
what is 15 times 2? 30.
15*2是30

122
00:05:35,800 --> 00:05:39,345
If we have 15 in our X we need 30 in our Y.
如果我们X方向值为15,Y方向值就需要30

123
00:05:39,845 --> 00:05:41,845
Now the background fills the game view
现在背景已经充满了游戏视图

124
00:05:41,845 --> 00:05:43,526
with no distortion.
并且没有失真

125
00:05:43,526 --> 00:05:45,526
Let's look at it in the Scene view.
让我们再切回场景视图看看

126
00:05:46,233 --> 00:05:48,233
Use Frame Selected to focus the 
使用框架选定来

127
00:05:48,233 --> 00:05:51,324
Scene view camera to the background's new size.
看看我们背景的新尺寸

128
00:05:51,324 --> 00:05:54,694
and we can see that we now have a nice big background.
现在我们有一个漂亮的大背景

129
00:05:55,360 --> 00:05:57,360
The background is still a bit too dark
不过背景还是有点暗

130
00:05:58,150 --> 00:06:01,592
The material is using a simple diffuse shader.
材料本身只使用了一个简单的散射着色器

131
00:06:02,368 --> 00:06:04,368
This means that the texture is being treated like
这意味着,材质本人是按照

132
00:06:04,368 --> 00:06:07,387
a simple painted surface using matt,
单一不光滑平面处理的

133
00:06:07,387 --> 00:06:09,318
not glossy paint.
不是有光泽的平面

134
00:06:09,318 --> 00:06:11,622
The surface of our background is being lit
背景是被我们场景中的光线点亮的

135
00:06:11,622 --> 00:06:13,427
by the lights in our scene.
光线点亮的

136
00:06:13,901 --> 00:06:17,137
These lights have been setup to light our player ship.
这些光线本来是为玩家飞船配置的

137
00:06:17,817 --> 00:06:20,398
1 light, the rim light, is shining up
照射飞船的边缘光

138
00:06:20,398 --> 00:06:22,398
from below and won't light the surface
是从下向上照射的,

139
00:06:22,398 --> 00:06:24,092
of the background at all.
根本照不到我们的背景

140
00:06:24,592 --> 00:06:26,746
The other 2 have very shallow angles
另外两个光线的角度

141
00:06:26,746 --> 00:06:29,593
that only rake the surface of the quad.
决定了它们只能扫到背景的表面

142
00:06:29,593 --> 00:06:31,593
So our background isn't receiving very
我们的背景并没有从

143
00:06:31,593 --> 00:06:33,593
much light from our lighting rig.
我们的光系统中受到足够的照射

144
00:06:34,093 --> 00:06:36,093
This is great for our player ship
整个光系统对玩家飞船来说是不错,

145
00:06:36,093 --> 00:06:38,974
but not so great for our background.
但是对背景并不适用

146
00:06:40,195 --> 00:06:42,195
We could add a light shining straight
我们可以增加一个光线

147
00:06:42,195 --> 00:06:44,305
down to light the background.
直接照到背景上

148
00:06:44,305 --> 00:06:46,305
But this would add another light to the ship
但这会给飞船也增加一个光线

149
00:06:46,305 --> 00:06:48,597
lighting it in a way that we wouldn't want.
导致飞船的光照跟我们的预期不同

150
00:06:49,178 --> 00:06:51,178
We could put the background and it's new light
我们可以通过将背景和新的光线

151
00:06:51,178 --> 00:06:53,178
on a separate layer so that the background
配置到单独的层

152
00:06:53,178 --> 00:06:55,178
light did not mix with out existing lights
这样新的光线就不会和现有的光线

153
00:06:55,178 --> 00:06:57,054
on the player ship.
混合到一起了.

154
00:06:57,054 --> 00:06:59,054
But there is a better way.
但是其实有一种简单的解决方法

155
00:07:00,382 --> 00:07:03,096
For more information on layers and how to use them
如果想知道关于分层和如何使用分层的信息,

156
00:07:03,096 --> 00:07:05,096
see the information linked below.
请查看下方连接

157
00:07:06,950 --> 00:07:09,102
If we think about our background image
仔细考虑一下我们的背景图像

158
00:07:09,102 --> 00:07:11,005
we simply want to have it display
我们只是要在游戏的后面

159
00:07:11,005 --> 00:07:12,587
behind our game.
显示这张图而已

160
00:07:12,587 --> 00:07:15,310
It's a flat plane, we do not need specialised
这个背景图就是个平面,不需要像飞船那样

161
00:07:15,310 --> 00:07:17,310
lighting like we need for our ship
需要单独的光线来照射(光照产生阴影增强立体感)

162
00:07:17,810 --> 00:07:20,348
and it's a waste to shine a directional light
为了点亮一个平面用方向光

163
00:07:20,348 --> 00:07:24,449
on a simply quad just to flat light it's contents.
直接照在它上面上也是一种浪费

164
00:07:25,156 --> 00:07:26,785
When dealing with a material,
当我们处理一个材料

165
00:07:26,785 --> 00:07:29,145
how that material treats the texture
材料的材质的表现方式

166
00:07:29,145 --> 00:07:32,098
depends upon what shader we choose.
取决于我们着色器的选取

167
00:07:32,098 --> 00:07:36,094
Diffuse treats the texture like matte paint.
漫射将使材质看起来像一个不光泽的表面

168
00:07:36,746 --> 00:07:39,606
The specular shader will treat that texture
镜面着色器将使材质

169
00:07:39,606 --> 00:07:42,817
like glossy paint, or shiny plastic.
看起来很光滑,类似塑料反光那样

170
00:07:43,538 --> 00:07:45,135
There are many other built-in shaders
Unity还有很多其他的内置

171
00:07:45,135 --> 00:07:46,678
that come with Unity.
着色器

172
00:07:46,678 --> 00:07:48,678
More can be found on the Asset Store
Asset Store(资源商城)中有更多的选择

173
00:07:48,678 --> 00:07:51,095
and we can write our own custom shaders.
当然我们也可以自定义个性化的着色器

174
00:07:51,758 --> 00:07:53,758
For more information on shaders
更多关于着色器信息

175
00:07:53,758 --> 00:07:55,994
see the information linked below.
请参考下方连接

176
00:07:56,893 --> 00:07:58,893
For our purposes we don't need any
按照我们当前的目标

177
00:07:58,893 --> 00:08:01,252
specialised lighting on our background.
我们不需要单独的光线照射我们的背景

178
00:08:01,252 --> 00:08:04,552
As a matter of fact we don't need any lighting at all.
事实上,我们的背景根本不需要光线

179
00:08:05,798 --> 00:08:08,778
For our background, let's change the shader.
我们改一下背景的着色器

180
00:08:08,778 --> 00:08:11,793
Let's choose Unlit - Texture
选择Unlit - Texture

181
00:08:11,793 --> 00:08:14,239
for the shader on the nebula material.
来为我们的星运物质着色

182
00:08:14,919 --> 00:08:16,919
Now our background is independent
现在我们的背景

183
00:08:16,919 --> 00:08:19,762
of our lighting system, and it displays
从我们的光线系统中独立出来了

184
00:08:19,762 --> 00:08:22,051
the texture exactly as it looks
材质已经跟它的原始图像

185
00:08:22,051 --> 00:08:23,606
in the original image
一模一样了

186
00:08:23,606 --> 00:08:25,606
and it uses no lights at all.
而且跟本没用光照

187
00:08:26,493 --> 00:08:28,899
In the game it's nice and bright.
在游戏里面，这个背景看起来不错而且很明亮

188
00:08:28,899 --> 00:08:31,576
If we change the shader back to diffuse
如果我们把着色器换回漫射

189
00:08:31,576 --> 00:08:34,239
we can see how much darker it is in the game.
我们可以看到背景变暗了好多

190
00:08:37,557 --> 00:08:39,557
Let's bring back our player and check that
我们现在把玩家飞船放回来

191
00:08:39,557 --> 00:08:41,557
everything looks good in context
检查一下是不是所有的东西都正常

192
00:08:41,557 --> 00:08:43,877
now that we have a background in place.
现在我们有背景了

193
00:08:44,817 --> 00:08:47,265
Okay, something's wrong with our ship.
现在飞船看起来有点问题

194
00:08:47,765 --> 00:08:49,474
Let's look at it in the Scene view
切回场景视图看看

195
00:08:49,474 --> 00:08:51,474
to see what's going on.
到底发生了什么

196
00:08:52,029 --> 00:08:54,029
Ah, the player ship is buried
啊,飞船被背景图像

197
00:08:54,029 --> 00:08:55,864
in the middle of the background,
给埋起来了

198
00:08:55,864 --> 00:08:57,990
they are both at origin.
它们都在原点

199
00:08:57,990 --> 00:09:00,790
The background should be behind the game.
背景应该在游戏的后方

200
00:09:00,790 --> 00:09:02,998
So let's grab the background and adjust it.
所以我们把背景调整一下

201
00:09:02,998 --> 00:09:05,301
along the Y axis.
让它沿着Y轴后退一些

202
00:09:05,301 --> 00:09:08,176
We can slide it in to a good position by hand
我们可以把背景拖拽到正常位置

203
00:09:08,176 --> 00:09:10,510
or we can simply set the transform position
或者我们简单设定一下变形组建的

204
00:09:10,510 --> 00:09:13,463
on the Y axis to -10.
Y轴参数为-10.

205
00:09:13,463 --> 00:09:16,542
Now the background is down and out of the way.
现在背景已经调整的靠后了，不再遮挡了

206
00:09:18,630 --> 00:09:20,630
When we look back at the game we can't
从游戏场景看,

207
00:09:20,630 --> 00:09:22,630
see any change to the background,
貌似并没有什么变化

208
00:09:22,630 --> 00:09:24,172
except for the fact that it is no longer
但飞船已经不再被

209
00:09:24,172 --> 00:09:26,382
in the middle of our space ship.
埋在背景中了

210
00:09:26,382 --> 00:09:28,382
This is due to the fact that our camera
这是因为我们的相机是正交的

211
00:09:28,382 --> 00:09:31,569
is orthographic and has no perspective.
而不是投影的(投影模式拉远背景会造成背景变小)

212
00:09:31,569 --> 00:09:33,569
The background can be any distance from the
背景与相机

213
00:09:33,569 --> 00:09:36,359
camera as long as it's within it's clipping plane
任意远近的图像

214
00:09:36,359 --> 00:09:38,359
and still look exactly the same.
都是一模一样的

215
00:09:40,130 --> 00:09:43,054
We have now setup our background and our lighting.
我们现在设定好了背景和光

216
00:09:43,054 --> 00:09:46,541
Next let's begin to create game play elements
下一步让我们增加游戏的元素

217
00:09:46,541 --> 00:09:48,541
by moving the player ship.
让我们的玩家飞船动起来