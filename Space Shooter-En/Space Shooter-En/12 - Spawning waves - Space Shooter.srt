1
00:00:01,685 --> 00:00:04,793
So we can now spawn 1 asteroid hazard.
现在我们可以产生1个小行星

2
00:00:04,793 --> 00:00:07,648
But that's far too easy to be a challenge.
不过这样缺乏挑战性

3
00:00:07,648 --> 00:00:10,585
Let's spawn wave after wave of them.
让我们把小行星做成一波波的产生

4
00:00:11,237 --> 00:00:14,913
To get started open the game controller script.
首先打开游戏控制器脚本

5
00:00:18,742 --> 00:00:20,742
The code that we've written works fine
我们编写好的代码

6
00:00:20,742 --> 00:00:22,701
for spawning just one asteroid.
可以正好产生一个小行星

7
00:00:23,201 --> 00:00:25,201
How do we get several of them?
怎么样让它一次多产生一些小行星呢?

8
00:00:25,604 --> 00:00:28,114
Well, we could try to simply duplicate
我们可以单纯的

9
00:00:28,114 --> 00:00:30,114
the code we wrote by copying and
把这段代码复制一下

10
00:00:30,114 --> 00:00:32,768
pasting it several times in our script.
让这段代码在脚本中多执行几次

11
00:00:34,742 --> 00:00:37,422
If we save this script, switch to Unity
保存一下脚本回到Unity

12
00:00:37,422 --> 00:00:39,117
and enter Play mode 
进入游戏模式

13
00:00:39,117 --> 00:00:40,801
it kind of works.
似乎还行

14
00:00:41,398 --> 00:00:43,077
We spawn several hazards,
我们一次产生了几个小行星

15
00:00:43,077 --> 00:00:44,720
though if they collide with each other
如果他们产生的时候就碰到了一起

16
00:00:44,720 --> 00:00:46,720
they do blow themselves up.
那么他们就会自行爆炸

17
00:00:46,720 --> 00:00:48,901
But this is less to do with our code
但是这段代码似乎少了点什么

18
00:00:48,901 --> 00:00:50,901
than the fact that we are spawning several
我们需要随机产生

19
00:00:50,901 --> 00:00:54,028
hazards at the same time at random spawn positions.
一些小行星

20
00:00:54,528 --> 00:00:56,528
Is this the correct way to do things?
这段代码是正确的做法么?

21
00:00:57,028 --> 00:00:59,028
Well, frankly, no.
坦白的说,不是

22
00:00:59,790 --> 00:01:01,790
Let's return to our script.
让我们回到我们的脚本

23
00:01:02,414 --> 00:01:04,483
Whenever we write the same code twice
当我们把一段相同的代码写两遍

24
00:01:04,483 --> 00:01:08,233
or more we are almost always doing something wrong.
或者更多次的时候,我们一定是哪里出了问题

25
00:01:08,788 --> 00:01:11,094
This code is terribly ugly.
这段代码太难看了

26
00:01:11,094 --> 00:01:13,289
We need to delete it as soon as possible,
让我们赶快删除这段代码

27
00:01:13,289 --> 00:01:14,858
and good riddance.
这下轻松了

28
00:01:15,499 --> 00:01:17,568
But how do we execute this code multiple
但是我们怎么让这段代码多执行几次

29
00:01:17,568 --> 00:01:20,498
times without simply duplicating it?
但是却不复制这些代码呢?

30
00:01:21,481 --> 00:01:24,346
What we do is we put our block of code
我们将把我们的代码块装进一个

31
00:01:24,346 --> 00:01:27,663
in to a loop and we execute that code
循环体中

32
00:01:27,663 --> 00:01:30,066
each time we cycle through that loop.
每次循环都会执行我们的代码

33
00:01:30,978 --> 00:01:36,798
First let's create a public int called hazardCount.
首先我们新建一个公有的int型变量命名为hazardCount

34
00:01:36,798 --> 00:01:38,798
To hold the number of times we cycle
这个变量保存了

35
00:01:38,798 --> 00:01:40,619
through our loop.
将要循环的次数

36
00:01:40,619 --> 00:01:42,441
We will be able to set this value in the
这个值可以通过Unity中的

37
00:01:42,441 --> 00:01:44,137
Inspector in Unity.
查看器窗口设定

38
00:01:44,789 --> 00:01:49,272
Next let's put our instantiate code in to our loop.
下一步是我们把实例小行星的代码放进循环中

39
00:01:49,772 --> 00:01:51,772
Indent the code we have written
缩进一下我们写好的代码

40
00:01:52,783 --> 00:01:56,517
and write for followed by a set of
然后写下代码for后面跟

41
00:01:56,517 --> 00:01:59,359
parenthesis containing 2 semicolons
左右括号并且括号中写

42
00:01:59,997 --> 00:02:02,683
Surround our code block with brackets
2个分号

43
00:02:03,445 --> 00:02:06,339
We have now put our code in to a for loop.
现在我们的代码被放进了一个for循环

44
00:02:06,936 --> 00:02:08,936
We are not finished yet, but I wanted to
我们还没做完

45
00:02:08,936 --> 00:02:11,434
show you the 2 semicolons here.
但是我想先让大家看看这2个分号

46
00:02:12,002 --> 00:02:14,387
When we are done writing our for loop
当我们把这个for循环写完

47
00:02:14,387 --> 00:02:16,387
it will look very much like a function
它看起来非常像一个

48
00:02:16,387 --> 00:02:18,093
with parameters.
带参数的函数

49
00:02:18,093 --> 00:02:21,219
Parameters in a function are separated by commas.
一般函数的参数是使用逗号分隔的

50
00:02:21,792 --> 00:02:24,376
In a for loop they are statements
在for循环中的条件就好比函数中的参数

51
00:02:24,376 --> 00:02:27,314
and they are separated by semicolons.
他们是被分号分隔的

52
00:02:28,257 --> 00:02:30,731
In the declaration of the for loop
在for循环的声明中

53
00:02:30,731 --> 00:02:33,479
we need to initialise a counter,
我们需要初始化计数器

54
00:02:33,479 --> 00:02:36,167
show the condition, or state how long
注明条件或者

55
00:02:36,167 --> 00:02:38,167
you want to stay in the loop
说明什么停止循环

56
00:02:38,167 --> 00:02:40,678
and then increment our counter.
然后增加我们的计数器

57
00:02:41,344 --> 00:02:45,192
In the initialise step create a new int
在初始化的步骤

58
00:02:45,192 --> 00:02:49,610
variable called i which is set to 0.
我们新建了一个int型的参数i并把它置为0

59
00:02:51,144 --> 00:02:53,801
Our condition will be to stay in the loop
我们的条件设置为

60
00:02:53,801 --> 00:02:57,408
as long as I is less than hazardCount.
I只要比hazardCount就执行循环体

61
00:02:58,944 --> 00:03:01,962
Lastly, every time we cycle through the loop
最后我们每次执行循环的时候都使用

62
00:03:01,962 --> 00:03:06,456
we increment i by 1 using i++.
i++来让i增加1

63
00:03:08,340 --> 00:03:10,926
Now when we execute SpawnWaves
现在如果我们执行SpawnWaves这个函数

64
00:03:10,926 --> 00:03:12,926
we will loop through this code as many
我们将会把生成小行星的代码执行

65
00:03:12,926 --> 00:03:15,736
times as we have set in hazardCount.
hazardCount中设定的值的次数

66
00:03:15,736 --> 00:03:17,736
and then continue on with the function
然后继续执行函数中循环后面剩下的代码

67
00:03:17,736 --> 00:03:21,039
after the loop, which in our case is nothing.
我们这里已经是没有别的代码了

68
00:03:21,039 --> 00:03:23,039
So the function will end.
所以这个函数会结束

69
00:03:23,940 --> 00:03:27,708
Save this script and switch back to Unity to test.
保存代码回到Unity测试一下

70
00:03:29,576 --> 00:03:31,933
Select GameController
选择GameController

71
00:03:31,933 --> 00:03:34,829
and change the hazard count to 10.
把hazard count的值设定为10

72
00:03:35,660 --> 00:03:37,993
Now let's enter and exit Play mode
现在让我们进入退出游戏模式几次

73
00:03:37,993 --> 00:03:39,993
a few times to see what happens.
看看会发生什么

74
00:03:41,708 --> 00:03:44,209
Very much like when we duplicated the code
跟我们复制代码的效果差不多

75
00:03:44,209 --> 00:03:46,162
we are spawning a number of asteroid
我们同时产生了很多

76
00:03:46,162 --> 00:03:48,162
hazards all at once.
小行星

77
00:03:48,579 --> 00:03:50,579
Many are destroying each other on the first
很多都在一开始就因为

78
00:03:50,579 --> 00:03:53,262
frame when they overlap and collide.
产生的位置互相覆盖在了一起而碰撞毁灭了

79
00:03:54,384 --> 00:03:57,135
Better, but not much of an improvement.
代码好了点,但似乎并没好多少

80
00:03:57,704 --> 00:03:59,662
We have simplified our code
我们简化了代码

81
00:03:59,662 --> 00:04:01,662
and we have easy control over the number of
并且让产生小行星的数量

82
00:04:01,662 --> 00:04:03,662
hazards that we spawn.
变得简单容易控制了

83
00:04:03,662 --> 00:04:06,557
But we don't have waves of enemies.
但是这只产生了一波敌人,剩下的几波敌人呢?

84
00:04:07,057 --> 00:04:09,896
What we want our code to do is wait
我们想让代码做到

85
00:04:09,896 --> 00:04:12,398
after spawning each asteroid hazard
产生一个小行星后

86
00:04:12,398 --> 00:04:14,315
before spawning the next.
等一会再产生下一个

87
00:04:14,315 --> 00:04:16,315
So we have a steady barrage of hazards
这样我们可以产生一波小行星灾难的攻势

88
00:04:16,315 --> 00:04:18,315
challenging our player.
挑战我们的玩家

89
00:04:19,036 --> 00:04:21,620
Return to the GameController script.
回到GameController脚本

90
00:04:22,738 --> 00:04:25,718
We need a public float variable called
我们需要一个公有的float(浮点型)参数spawnWait

91
00:04:25,718 --> 00:04:29,910
spawnWait to hold our wait time value.
来保存我们的等待时间

92
00:04:30,645 --> 00:04:33,331
Logically where we want to place our
逻辑上来说

93
00:04:33,331 --> 00:04:36,404
wait code is at the end of the spawn code
等待的代码应该在for循环中

94
00:04:36,404 --> 00:04:39,517
in the for loop before the code loops back
小行星生成的代码之后执行

95
00:04:39,517 --> 00:04:41,999
and spawns the next asteroid hazard.
这样生成下一个小行星前会稍等一会

96
00:04:42,886 --> 00:04:45,260
After instantiate write
在instantiate后面写

97
00:04:45,260 --> 00:04:48,331
wait for seconds spawnWait.
WaitForSeconds(spawnWait)

98
00:04:49,052 --> 00:04:51,274
This is the correct logical place
这是正确的让我们的代码等待

99
00:04:51,274 --> 00:04:53,624
in the code for us to wait
的逻辑顺序

100
00:04:53,624 --> 00:04:56,660
but this syntax does not work in C#.
但是这样并不符合C#的语法

101
00:04:57,146 --> 00:04:59,393
To have a function that can pause
让一个函数暂停

102
00:04:59,393 --> 00:05:02,004
without pausing our entire game
但是并不使整个游戏停止

103
00:05:02,004 --> 00:05:05,272
we need to make this function a coroutine.
我们需要使这个函数成为协程

104
00:05:05,272 --> 00:05:07,035
And coroutines have some very
协程的编写

105
00:05:07,035 --> 00:05:09,035
specific considerations.
有很多具体的注意事项

106
00:05:09,535 --> 00:05:11,977
For more information on coroutines
更多关于协程的信息

107
00:05:11,977 --> 00:05:14,957
please see the lessons and information linked below.
请参考下方连接

108
00:05:15,719 --> 00:05:18,382
For this function to become a coroutine
让一个函数成为协程

109
00:05:18,382 --> 00:05:20,382
we cannot return void.
我们不能让它返回void

110
00:05:20,785 --> 00:05:23,695
We must return IEnumberator.
必须返回IEnumberator

111
00:05:24,609 --> 00:05:26,707
And our WaitForSeconds line
并且我们WaitForSeconds这行代码

112
00:05:26,707 --> 00:05:28,196
must be written as
必须改写成

113
00:05:28,196 --> 00:05:32,097
yield return new WaitForSeconds.
yield return new WaitForSeconds

114
00:05:33,260 --> 00:05:36,587
Lastly we cannot call a coroutine
最后我们并不能像调用函数

115
00:05:36,587 --> 00:05:38,338
like we call a function.
那样调用协程

116
00:05:38,783 --> 00:05:42,897
We must explicitly use StartCoroutine.
我们必须明确使用StartCoroutine调用协程

117
00:05:42,897 --> 00:05:45,202
With either the coroutine's name
并填写协程的名称

118
00:05:45,202 --> 00:05:47,903
or the signature in the parenthesis.
或者插入语的签名

119
00:05:49,618 --> 00:05:52,852
To be polite to our players let's create a new
为了对我们的玩家友善一点

120
00:05:52,852 --> 00:05:56,558
public float variable called startWait.
让我们新建一个startWait的参数

121
00:05:57,279 --> 00:05:59,599
And let's use this as the first line
并把这个参数放到我们

122
00:05:59,599 --> 00:06:01,599
in our new coroutine.
协程的第一行

123
00:06:02,942 --> 00:06:04,942
Copy the spawnWait line
复制spawnWait这行代码

124
00:06:04,942 --> 00:06:07,812
and paste it as the first line of the block.
把他们粘贴到协程内代码的第一行

125
00:06:07,812 --> 00:06:11,136
And change spawnWait to startWait.
把spawnWait 改成startWait

126
00:06:12,548 --> 00:06:14,976
When we set this value in the Inspector
当我们在查看器中设置了这个值的时候

127
00:06:15,435 --> 00:06:17,435
it will be a short pause after the game
游戏开始的时候

128
00:06:17,435 --> 00:06:20,116
starts for the player to get ready,
会有个稍微的停顿让玩家做好准备

129
00:06:20,116 --> 00:06:21,963
get their hands on the controls and
让他们把手放到控制位置

130
00:06:21,963 --> 00:06:23,438
prepare for action.
准备接受挑战

131
00:06:24,560 --> 00:06:27,071
Save this script and return to Unity.
保存脚本回到Unity

132
00:06:28,690 --> 00:06:31,119
With GameController selected
选定GameController 

133
00:06:31,119 --> 00:06:34,663
let's set Spawn Wait to 0.5.
设定Spawn Wait的值为0.5

134
00:06:35,163 --> 00:06:38,444
So we will spawn 2 asteroids every second.
所以每秒产生2个小行星

135
00:06:38,861 --> 00:06:41,881
And let's set the Start Wait to 1,
把Start Wait设定为1

136
00:06:41,881 --> 00:06:45,003
giving our players 1 second to get ready.
让我们的玩家有1秒钟的准备时间

137
00:06:45,503 --> 00:06:48,755
Save the scene and enter Play mode to test.
保存场景进入游戏模式测试一下

138
00:06:51,511 --> 00:06:54,999
Now we have a steady stream of hazards.
现在我们有了源源不断的小行星来袭

139
00:06:59,781 --> 00:07:01,339
Let's try that again.
让我们再试一次

140
00:07:05,941 --> 00:07:07,510
Very nice.
完美

141
00:07:10,112 --> 00:07:12,112
But when the first 10 asteroids have
但是当10个小行星

142
00:07:12,112 --> 00:07:14,112
cleared the scene there is nothing
被消灭了以后

143
00:07:14,112 --> 00:07:15,779
more for the player to do.
我们的玩家就没事干了

144
00:07:16,391 --> 00:07:18,391
We could increase our hazard count
我们可以让小行星的数量增加到

145
00:07:18,391 --> 00:07:21,148
to 50, 100, 1000,
50, 100甚至1000

146
00:07:21,562 --> 00:07:23,562
but that could get monotonous,
但是这实在是太单调了

147
00:07:23,562 --> 00:07:26,114
and if our player is good they could
并且如果我们的玩家足够优秀

148
00:07:26,114 --> 00:07:28,879
eventually run out of hazards to shoot or avoid.
这些小行星迟早会被全部躲开或者被击毁

149
00:07:30,506 --> 00:07:32,506
Return to the PlayerController script.
回到PlayerController脚本

150
00:07:32,867 --> 00:07:35,350
We want to create continuous waves of hazards
我们需要源源不断的小行星

151
00:07:35,350 --> 00:07:38,357
until our player is destroyed and the game is over.
直到玩家被消灭或者游戏结束

152
00:07:38,857 --> 00:07:41,194
We can do this by wrapping our instantiate
我们可以通过把实例化的循环

153
00:07:41,194 --> 00:07:43,194
loop in another loop.
嵌套进另一层循环中实现

154
00:07:44,495 --> 00:07:47,323
Grab the for loop code that we have written


155
00:07:47,323 --> 00:07:49,323
and indent that code.

156
00:07:50,624 --> 00:07:54,271
Write while followed by parenthesis.

157
00:07:54,881 --> 00:07:56,881
Wrap the code block in brackets.

158
00:07:59,439 --> 00:08:01,398
This is a while loop.

159
00:08:01,398 --> 00:08:03,398
With a while loop we will continue to

160
00:08:03,398 --> 00:08:05,398
cycle through that loop while the

161
00:08:05,398 --> 00:08:07,732
statement in the parenthesis is true.

162
00:08:07,995 --> 00:08:11,540
Let's say as long as A is greater than B

163
00:08:11,540 --> 00:08:14,148
or whatever statement our code needs.

164
00:08:15,173 --> 00:08:18,616
In this case we will say while true

165
00:08:18,616 --> 00:08:21,381
and of course true will always be true

166
00:08:21,381 --> 00:08:23,785
so this becomes an infinite loop.

167
00:08:24,257 --> 00:08:26,009
We will discuss how to break out of this

168
00:08:26,009 --> 00:08:28,009
infinite loop in another assignment.

169
00:08:28,675 --> 00:08:31,271
The way this works is in our while loop

170
00:08:31,271 --> 00:08:33,023
we execute our for loop

171
00:08:33,633 --> 00:08:35,981
and we instantiate our wave of hazards

172
00:08:35,981 --> 00:08:37,663
based on our hazard count.

173
00:08:38,481 --> 00:08:40,397
When we're done spawning our wave

174
00:08:40,397 --> 00:08:42,012
the while loop brings us back to the top

175
00:08:42,012 --> 00:08:44,620
of the block and we execute the for loop again.

176
00:08:45,272 --> 00:08:47,272
To create a gap between our waves we need

177
00:08:47,272 --> 00:08:50,398
to wait, this time at the end of the while loop.

178
00:08:50,898 --> 00:08:55,121
Write yield return new WaitForSeconds.

179
00:08:57,320 --> 00:09:00,409
Write public float waveWait.

180
00:09:00,909 --> 00:09:02,909
And the amount of time we wait between waves

181
00:09:02,909 --> 00:09:05,577
will be represented by waveWait.

182
00:09:06,790 --> 00:09:09,370
Save this script and return to Unity.

183
00:09:10,726 --> 00:09:12,561
We can see our GameController component

184
00:09:12,561 --> 00:09:14,437
now has a Wave Wait property.

185
00:09:14,937 --> 00:09:16,867
Let's set this to 4.

186
00:09:17,201 --> 00:09:20,609
Save the scene and enter Play mode to test.

187
00:09:22,739 --> 00:09:25,485
There's our first wave of 10 asteroids.

188
00:09:27,615 --> 00:09:29,809
We have a pause between waves as we wait

189
00:09:29,809 --> 00:09:31,685
in our while loop.

190
00:09:31,685 --> 00:09:33,574
and there is another wave as we

191
00:09:33,574 --> 00:09:35,574
execute our for loop again.

192
00:09:37,704 --> 00:09:39,329
Another pause.

193
00:09:40,964 --> 00:09:43,409
And wave 3, and this will continue

194
00:09:43,409 --> 00:09:45,409
until we exit Play mode.

195
00:09:49,294 --> 00:09:51,637
This is starting to look like a real game.

196
00:09:52,139 --> 00:09:54,139
There is one last step we need to do

197
00:09:54,139 --> 00:09:56,968
before we sign off on this segment however.

198
00:09:58,393 --> 00:10:01,379
Look in to our Hierarchy while we're playing the game,

199
00:10:01,379 --> 00:10:03,918
it's full of used explosion clones.

200
00:10:05,233 --> 00:10:07,344
Every time we destroy an asteroid

201
00:10:07,344 --> 00:10:09,454
the asteroid spawns an explosion

202
00:10:09,454 --> 00:10:11,287
and there it stays.

203
00:10:11,287 --> 00:10:13,287
Currently we have only 2 ways of destroying

204
00:10:13,287 --> 00:10:15,121
things in our game.

205
00:10:15,121 --> 00:10:17,633
When they leave the boundary trigger box

206
00:10:17,633 --> 00:10:19,508
and by contact.

207
00:10:19,508 --> 00:10:21,508
Neither will work in this case.

208
00:10:22,049 --> 00:10:23,536
We will need to write another way of

209
00:10:23,536 --> 00:10:26,019
destroying things by time.

210
00:10:27,003 --> 00:10:28,390
Exit Play mode.

211
00:10:29,627 --> 00:10:31,627
Select the Scripts folder

212
00:10:32,279 --> 00:10:34,738
and use the Create menu in the Project view.

213
00:10:35,345 --> 00:10:37,345
Choose C# Script.

214
00:10:38,895 --> 00:10:41,131
Unity creates new assets where we are

215
00:10:41,131 --> 00:10:42,868
focused in the Editor.

216
00:10:42,868 --> 00:10:44,868
By selecting the Scripts folder before we

217
00:10:44,868 --> 00:10:47,885
created our new script Unity created it

218
00:10:47,885 --> 00:10:49,649
inside the Scripts folder,

219
00:10:49,649 --> 00:10:51,869
so there is no need to file it away.

220
00:10:52,439 --> 00:10:55,489
Rename this script DestroyByTime.

221
00:10:55,878 --> 00:10:58,962
And with the script selected open it for editing.

222
00:11:01,416 --> 00:11:04,125
This script will be very simple.

223
00:11:04,125 --> 00:11:06,923
After removing the sample code write

224
00:11:06,923 --> 00:11:11,519
void Start Destroy gameObject.

225
00:11:12,074 --> 00:11:13,644
Now this seems a bit crazy,

226
00:11:13,644 --> 00:11:15,644
destroying our game object the same frame

227
00:11:15,644 --> 00:11:17,366
it's instantiated, no?

228
00:11:17,866 --> 00:11:20,818
Well, Destroy is very useful.

229
00:11:20,818 --> 00:11:22,818
For more information on Destroy see the

230
00:11:22,818 --> 00:11:25,333
lessons and information linked below.

231
00:11:26,354 --> 00:11:29,380
One of the parameters in Destroy is Time.

232
00:11:29,880 --> 00:11:31,880
We can specify a wait time before

233
00:11:31,880 --> 00:11:33,880
Destroy takes effect.

234
00:11:34,670 --> 00:11:37,683
Let's write public float lifetime.

235
00:11:39,647 --> 00:11:41,647
And let's copy lifetime.

236
00:11:42,368 --> 00:11:44,658
After gameObject add a comma

237
00:11:44,658 --> 00:11:46,658
and paste lifetime.

238
00:11:47,904 --> 00:11:50,866
Now when our game object is instantiated

239
00:11:50,866 --> 00:11:52,726
like a ticking time bomb

240
00:11:52,726 --> 00:11:54,726
the object will set it's lifetime and

241
00:11:54,726 --> 00:11:56,726
destroy itself when the time is up.

242
00:11:58,276 --> 00:12:01,063
Save this script and return to Unity.

243
00:12:02,834 --> 00:12:06,394
Select the Explosions folder in Prefabs VFX.

244
00:12:06,918 --> 00:12:08,918
In the Explosions folder are our

245
00:12:08,918 --> 00:12:10,808
explosion prefabs.

246
00:12:10,808 --> 00:12:13,361
Select the Astroid explosion and using the

247
00:12:13,361 --> 00:12:16,312
Add Component button select Scripts

248
00:12:16,729 --> 00:12:19,230
and choose DestroyByTime.

249
00:12:20,900 --> 00:12:24,070
Set the value of lifetime to 2.

250
00:12:26,034 --> 00:12:29,529
We can also add a script this way to multiple items.

251
00:12:29,529 --> 00:12:32,778
Let's update all of our explosion prefabs.

252
00:12:32,778 --> 00:12:35,219
Select the other 2 explosion prefabs

253
00:12:35,219 --> 00:12:37,578
and using multi-object editing

254
00:12:37,578 --> 00:12:41,735
use the Add Component button and select Scripts

255
00:12:41,735 --> 00:12:44,839
and again choose DestroyByTime.

256
00:12:45,850 --> 00:12:48,838
And set the lifetime value to 2 as well.

257
00:12:49,275 --> 00:12:51,552
This adds the script and sets the

258
00:12:51,552 --> 00:12:53,552
lifetime value on both prefabs

259
00:12:53,552 --> 00:12:55,030
at the same time.

260
00:12:55,596 --> 00:12:57,195
Save the scene.

261
00:12:57,195 --> 00:12:59,612
Enter Play mode and test.

262
00:13:07,871 --> 00:13:10,440
We can see the explosion clones are no longer

263
00:13:10,440 --> 00:13:12,440
accumulating in our scene,

264
00:13:12,440 --> 00:13:14,841
not even the player's explosion.

265
00:13:16,528 --> 00:13:18,709
We almost have a complete game!

266
00:13:19,097 --> 00:13:20,987
In the next assignment we will add

267
00:13:20,987 --> 00:13:22,822
audio to our scene.

268
00:13:22,822 --> 00:13:24,423
Including explosion sounds

269
00:13:24,423 --> 00:13:26,423
and laser guns blasting.
